name: Build Source RPM (for COPR/Manual Upload)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_source_rpm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        # Ensures the winboat.spec file is present

      - name: Set Version, Update USB IDs, and Create Source Tarball
        id: prep
        run: |
          # 1. Extract version number (assuming it's in package.json)
          # Note: If no package.json, you MUST manually set the version here.
          VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.1")
          
          # 2. Update USB IDs database (CRITICAL STEP from release.yml)
          # Ensure 'data' directory exists, then download the latest file
          mkdir -p data
          echo "Removing old usb.ids file..."
          rm -f data/usb.ids || true
          echo "Downloading latest usb.ids from linux-usb.org..."
          curl -o data/usb.ids http://www.linux-usb.org/usb.ids
          echo "USB IDs database updated successfully"
          
          # 3. Create the Source Tarball, including the new data/usb.ids file
          TARBALL_NAME="winboat-$VERSION.tar.gz"
          TARBALL_PATH="/tmp/$TARBALL_NAME" # Define a path outside the source tree
          echo "Creating $TARBALL_NAME and writing to $TARBALL_PATH..."
          # FIX: Write the tarball to /tmp to avoid the 'file changed as we read it' error.
          # We archive the current directory (.), but write the output to /tmp.
          tar -czvf $TARBALL_PATH \
            --exclude=.git \
            --exclude=node_modules .
          
          # Pass the tarball path and version to later steps
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          echo "TARBALL_PATH=$TARBALL_PATH" >> "$GITHUB_OUTPUT"

      - name: Install RPM Build Tools
        run: |
          # Ensure package lists are up-to-date
          sudo apt-get update
          # We install 'rpm' (which provides rpmbuild) and 'build-essential' for fundamental tools.
          sudo apt-get install -y rpm build-essential
          echo "Installed RPM tools and dependencies successfully."

      - name: Create RPM Build Environment
        run: |
          # Create the mandatory directory structure for rpmbuild
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          
          # FIX: Dynamically find the .spec file anywhere in the repository and copy it
          SPEC_FILE=$(find . -maxdepth 3 -iname "*.spec" -print -quit)

          if [ -z "$SPEC_FILE" ]; then
            echo "::error::winboat.spec not found. Please ensure a .spec file exists in your repository."
            exit 1
          fi
          
          echo "Found spec file: $SPEC_FILE"
          # Copy the found spec file into the SPECS directory
          cp $SPEC_FILE ~/rpmbuild/SPECS/
          
          # Copy the source tarball from /tmp into the SOURCES directory
          cp ${{ steps.prep.outputs.TARBALL_PATH }} ~/rpmbuild/SOURCES/

      - name: Generate Source RPM (.src.rpm)
        run: |
          # The -bs flag tells rpmbuild to 'Build Source' package only.
          # We use the full path to the spec file now
          rpmbuild -bs ~/rpmbuild/SPECS/$(basename $SPEC_FILE)

      - name: Upload Source RPM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: winboat-srpm
          path: ~/rpmbuild/SRPMS/*.src.rpm
